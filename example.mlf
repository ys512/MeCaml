(module
  ($out (let ($_aux_1 (apply (global $Mem $combine) (apply (global $Mem $resize) (apply (global $Mem $combine) (block (tag 0) 1) 0 1 (block (tag 0) 0) 0 1) 65) 1 1 (block (tag 0) 2222222222222222222) 1 0)) (let ($_aux_6 (apply (global $Mem $extract) $_aux_1 0 0 1 1)) (let ($_aux_8 (apply (global $Mem $extract) $_aux_6 0 0 0 1)) (if (== (field 0 $_aux_8) 0) (let ($_aux_9 (apply (global $Mem $extract) $_aux_6 0 1 1 0)) (let ($n $_aux_9) (let ($_aux_7 (apply (global $Mem $extract) $_aux_1 1 1 1 0)) (let ($v $_aux_7) (apply (global $Mem $resize) (apply (global $Mem $combine) (block (tag 0) 0) 0 1 $v 1 0) 65))))) (let ($_aux_2 (apply (global $Mem $extract) $_aux_1 0 0 1 1)) (let ($_aux_4 (apply (global $Mem $extract) $_aux_2 0 0 0 1)) (if (== (field 0 $_aux_4) 1) (let ($_aux_5 (apply (global $Mem $extract) $_aux_2 0 1 0 1)) (let ($b $_aux_5) (let ($_aux_3 (apply (global $Mem $extract) $_aux_1 1 1 1 0)) (let ($v $_aux_3) (apply (global $Mem $resize) (apply (global $Mem $combine) (block (tag 0) 1) 0 1 $b 0 1) 65))))) (apply (global $Stdlib $exit) 1)))))))))
  ($w (let (rec ($fib (lambda ($x) (if (field 0 (block (tag 0) (== (field 0 $x) (field 0 (block (tag 0) 0))))) (block (tag 0) 1) (if (field 0 (block (tag 0) (== (field 0 $x) (field 0 (block (tag 0) 1))))) (block (tag 0) 1) (block (tag 0) (+ (field 0 (apply $fib (block (tag 0) (- (field 0 $x) (field 0 (block (tag 0) 1)))))) (field 0 (apply $fib (block (tag 0) (- (field 0 $x) (field 0 (block (tag 0) 2))))))))))))) (apply $fib (block (tag 0) 5))))
  (_ (apply (global $Mem $debug) $out))
(export $out $w))