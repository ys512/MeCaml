(block (tag 0) 0 );
(global $Mem $combine (block (tag 0) 0 ) 0 1 (block (tag 0) 3 ) 1 0);
(global $Mem $combine (block (tag 0) 1 ) 0 1 (block (tag 0) 0 ) 0 1);
(let ($aux_8 (global $Mem $combine (block (tag 0) 0 ) 0 1 (block (tag 0) 1 ) 1 0)) (let ($aux_12 global $Mem $split $aux_8 0 1 0 1) (let ($aux_13 (field 0 $aux_12)) (let ($aux_14 (field 1 $aux_12)) (switch (field 0 $aux_13) ((block (tag 0) 1 ) (let ($_b $aux_14) (block (tag 0) 2 ))) (_ (let ($aux_9 global $Mem $split $aux_8 0 1 1 0) (let ($aux_10 (field 0 $aux_9)) (let ($aux_11 (field 1 $aux_9)) (switch (field 0 $aux_10) ((block (tag 0) 0 ) (let ($_n $aux_11) $_n)) (_ global $Stdlib $exit 1)))))))))));
(lambda $_x $_x);
(let (foo (lambda $_x $_x)) (apply $_foo (block (tag 0) 1 )));
