(module
  ($x (block (tag 0) 0))
  ($y (apply (global $Mem $resize) (apply (global $Mem $combine) (block (tag 0) 0) 0 1 (block (tag 0) 3) 1 0) 65))
  ($z (apply (global $Mem $resize) (apply (global $Mem $combine) (block (tag 0) 1) 0 1 (block (tag 0) 1) 0 1) 65))
  ($out (let ($_aux_1 (apply (global $Mem $combine) (apply (global $Mem $resize) (apply (global $Mem $combine) (block (tag 0) 0) 0 1 (block (tag 0) 11111111111) 1 0) 65) 1 1 (block (tag 0) 123456) 1 0)) (let ($_aux_6 (apply (global $Mem $extract) $_aux_1 0 0 1 1)) (let ($_aux_8 (apply (global $Mem $extract) $_aux_6 0 0 0 1)) (if (== (field 0 $_aux_8) 0) (let ($_aux_9 (apply (global $Mem $extract) $_aux_6 0 1 1 0)) (let ($n $_aux_9) (let ($_aux_7 (apply (global $Mem $extract) $_aux_1 1 1 1 0)) (let ($v $_aux_7) (apply (global $Mem $resize) (apply (global $Mem $combine) (block (tag 0) 0) 0 1 $v 1 0) 65))))) (let ($_aux_2 (apply (global $Mem $extract) $_aux_1 0 0 1 1)) (let ($_aux_4 (apply (global $Mem $extract) $_aux_2 0 0 0 1)) (if (== (field 0 $_aux_4) 1) (let ($_aux_5 (apply (global $Mem $extract) $_aux_2 0 1 0 1)) (let ($b $_aux_5) (let ($_aux_3 (apply (global $Mem $extract) $_aux_1 1 1 1 0)) (let ($v $_aux_3) (apply (global $Mem $resize) (apply (global $Mem $combine) (block (tag 0) 1) 0 1 $b 0 1) 65))))) (apply (global $Stdlib $exit) 1)))))))))
  ($foo (lambda ($x) $x))
  (_ (let ($foo (lambda ($x) $x)) (apply $foo (block (tag 0) 1))))
  ($v (let ($foo (lambda ($x) (let ($_aux_1 $x) (let ($_aux_4 (apply (global $Mem $extract) $_aux_1 0 0 0 1)) (if (== (field 0 $_aux_4) 0) (let ($_aux_5 (apply (global $Mem $extract) $_aux_1 0 1 1 0)) (let ($n $_aux_5) $n)) (let ($_aux_2 (apply (global $Mem $extract) $_aux_1 0 0 0 1)) (if (== (field 0 $_aux_2) 1) (let ($_aux_3 (apply (global $Mem $extract) $_aux_1 0 1 0 1)) (let ($b $_aux_3) (block (tag 0) 0))) (apply (global $Stdlib $exit) 1)))))))) (apply $foo (apply (global $Mem $resize) (apply (global $Mem $combine) (block (tag 0) 0) 0 1 (block (tag 0) 1) 1 0) 65))))
  (_ (apply (global $Mem $debug) $out))
(export $x $y $z $out $foo $v))