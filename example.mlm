tag ab = {A, B};
tag cd = {C, D};
tag abcd = ab + cd;

type ab = tag ab;
type abcd = tag abcd;
type t = (x:ab) * (match x with A -> int | B -> bool);

let x:abcd = A;
let y:t = A 3;
let z:t = B true;
let w:int = match ((A 1111111111):t, 22222222) with
    | (A n, v) -> v
    | (B b, v) -> v;
let foo:int->int = fun x:int -> x;
let foo x:int = x in foo 1;
let v = 
    let foo x:t = match x with
        | A n -> n
        | B b -> 0
    in foo (A 1);